{"version":3,"sources":["ShortcutsHelper.js","Video.js","App.js","serviceWorker.js","index.js"],"names":["ShortcutsHelper","className","React","Component","Video","props","onChangeUrl","event","currentUrl","parseUrl","target","value","localStorage","setItem","setState","onReady","onContentStateChange","contentState","hasChange","toggle","pauseVideo","clearTimeout","timeout","window","setTimeout","content","JSON","stringify","console","log","state","getItem","currentTime","keyMap","START_STOP_VIDEO","macos","windows","linux","JUMP_BACK","JUMP_FRONT","keyMapHandler","jumpBack","bind","jumpFront","startStopEvent","this","getCurrentTime","seekTo","Math","abs","_toggle","keymap","osName","getOS","key","pressedKey","shortCutsKey","keys","split","map","x","trim","sort","join","Object","os","navigator","appVersion","indexOf","parse","e","url","parseInt","playVideo","getContentState","type","onChange","placeholder","videoId","opts","height","width","playerVars","fs","rel","disablekb","autoplay","defaultContentState","toolbar","options","toolbarClassName","wrapperClassName","editorClassName","code","eventKey","getShortcutEvent","eventName","apply","document","addEventListener","onKeyUp","onKeyDown","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8fada4e7.chunk.js","sourcesContent":["import React from 'react';\n\nimport './ShortcutsHelper.css';\n\nclass ShortcutsHelper extends React.Component {\n  render() {\n    return (\n      <div className=\"Shortcuts\">\n        <h3>Comandos</h3>\n        <div className=\"Shortcuts-row\">\n          <label>Volta 5 segundos</label>\n          <span>{'ctrl + ,'}</span>\n        </div>\n        <div className=\"Shortcuts-row\">\n          <label>Pula 5 segundos</label>\n          <span>{'ctrl + .'}</span>\n        </div>\n        <div className=\"Shortcuts-row\">\n          <label>Start/Stop</label>\n          <span>command</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ShortcutsHelper;\n","import React from 'react';\n\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n\nimport YouTube from 'react-youtube';\nimport ShortcutsHelper from './ShortcutsHelper';\n\nimport './Video.css';\n\nclass Video extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.target = null;\n    this.timeout = null;\n\n    this.toggle = true;\n\n    this.state = {\n      currentUrl: localStorage.getItem('current-url') || 'KNNLt38HE64',\n      contentState: null,\n      currentTime: localStorage.getItem('current-time') || 0\n    }\n\n    this.keyMap({\n      START_STOP_VIDEO: {\n        macos: 'MetaRight',\n        windows: 'ControlRight',\n        linux: 'ControlRight'\n      },\n      JUMP_BACK: {\n        macos: 'ControlLeft+Comma',\n        windows: 'ControlLeft+Comma',\n        linux: 'ControlLeft+Comma'\n      },\n      JUMP_FRONT: {\n        macos: 'ControlLeft+Period',\n        windows: 'ControlLeft+Period',\n        linux: 'ControlLeft+Period'\n      }\n    });\n\n    this.keyMapHandler = {\n      JUMP_BACK: this.jumpBack.bind(this),\n      JUMP_FRONT: this.jumpFront.bind(this),\n      START_STOP_VIDEO: this.startStopEvent.bind(this)\n    };\n  }\n\n  jumpFront() {\n    let currentTime = this.target.getCurrentTime();\n    this.target.seekTo(Math.abs(currentTime + 3));\n  }\n\n  jumpBack() {\n    let currentTime = this.target.getCurrentTime();\n    this.target.seekTo(Math.abs(currentTime - 3));\n  }\n\n  pauseVideo() {\n    this.target.pauseVideo();\n    localStorage.setItem('current-time', this.target.getCurrentTime());\n  }\n\n  startStopEvent() {\n    this._toggle();\n  }\n\n  keyMap(keymap) {\n    const osName = this.getOS();\n    this.pressedKey = {};\n    this.shortCutsKey = {};\n    for (let key in keymap) {\n      const keys = keymap[key][osName].split('+').map(x => x.trim());\n      keys.sort();\n      this.shortCutsKey[keys.join('_')] = key;\n    }\n  }\n\n  getShortcutEvent() {\n    const keys = Object.keys(this.pressedKey);\n    keys.sort();\n    return keys.join('_');\n  }\n\n  getOS() {\n    var os=\"unknown\";\n\n    if (navigator.appVersion.indexOf(\"Win\") !==-1) os=\"windows\";\n    if (navigator.appVersion.indexOf(\"Mac\") !==-1) os=\"macos\";\n    if (navigator.appVersion.indexOf(\"Linux\") !==-1) os=\"linux\";\n\n    return os;\n  }\n\n  getContentState() {\n    try {\n      return JSON.parse(localStorage.getItem('content'));\n    } catch(e) {\n      return null;\n    }\n  }\n\n  parseUrl(url) {\n    return url.split('v=')[1];\n  }\n\n  onChangeUrl = (event) => {\n    const currentUrl = this.parseUrl(event.target.value);\n    localStorage.setItem('current-url', currentUrl);\n    this.setState({\n      currentUrl\n    });\n  }\n\n  onReady = (event) => {\n    this.target = event.target;\n  }\n\n  _toggle () {\n    if (this.toggle) {\n      const currentTime = parseInt(localStorage.getItem('current-time')) || 0;\n      this.target.seekTo(currentTime);\n      this.target.playVideo();\n    } else {\n      this.pauseVideo();\n    }\n    this.toggle = !this.toggle;\n  }\n\n  hasChange(contentState) {\n    return JSON.stringify(contentState) !== JSON.stringify(this.getContentState());\n  }\n\n  onContentStateChange = (contentState) => {\n    if (!this.hasChange(contentState)) {\n      return;\n    }\n\n    if (!this.toggle && this.target) {\n      this.pauseVideo();\n      this.toggle = true;\n    }\n\n    clearTimeout(this.timeout);\n\n    this.timeout = window.setTimeout(() => {\n      const content = JSON.stringify(contentState);\n      localStorage.setItem('content', content);\n      console.log('Salvo!');\n    }, 1000);\n  }\n\n  render() {\n    const opts = {\n      height: '390',\n      width: '640',\n      playerVars: {\n        fs: 0,\n        rel: 0,\n        disablekb: 1,\n        autoplay: 0\n      },\n    };\n\n    return (\n      <div className=\"Video\">\n        <div className=\"col_1\">\n          <div className=\"video-container\">\n            <div className=\"toolbar-search\">\n              <input\n                type=\"text\"\n                onChange={this.onChangeUrl}\n                placeholder=\"https://www.youtube.com/watch?v=<id>\" />\n            </div>\n            <YouTube\n              className=\"video-player\"\n              videoId={this.state.currentUrl}\n              opts={opts}\n              onReady={this.onReady}\n            />\n            <ShortcutsHelper />\n          </div>\n        </div>\n        <div className=\"col_2\">\n          <Editor\n            defaultContentState={this.getContentState()}\n            toolbar={{\n              options: ['inline', 'blockType', 'fontSize', 'fontFamily', 'list', 'textAlign', 'colorPicker', 'link', 'remove', 'history'],\n            }}\n            toolbarClassName=\"toolbarClassName\"\n            wrapperClassName=\"wrapperClassName\"\n            editorClassName=\"editorClassName\"\n            onContentStateChange={this.onContentStateChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  onKeyUp(event) {\n    console.log(event.code);\n    if (event.code === 'ControlLeft' || event.code === 'MetaRight') {\n      this.pressedKey = {};\n    } else {\n      delete this.pressedKey[event.code];\n    }\n  }\n\n  onKeyDown(event) {\n    this.pressedKey[event.code] = true;\n\n    const eventKey = this.getShortcutEvent();\n    const eventName = this.shortCutsKey[eventKey];\n\n    if (this.keyMapHandler[eventName]) {\n      this.keyMapHandler[eventName].apply(this);\n    }\n\n    if (!this.target) {\n      return;\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keyup\", this.onKeyUp.bind(this));\n    document.addEventListener(\"keydown\", this.onKeyDown.bind(this));\n  }\n}\n\nexport default Video;\n","import React from 'react';\n\nimport Video from './Video';\n\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Video />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}