{"version":3,"sources":["Shortcuts.js","Video.js","App.js","serviceWorker.js","index.js"],"names":["Shortcuts","className","React","Component","Video","props","onChangeUrl","event","currentUrl","parseUrl","target","value","console","log","localStorage","setItem","setState","onReady","onContentStateChange","contentState","pauseVideo","clearTimeout","timeout","window","setTimeout","toggle","state","getItem","url","split","this","playVideo","code","_toggle","currentTime","getCurrentTime","seekTo","Math","abs","type","onChange","placeholder","videoId","opts","height","width","playerVars","fs","disablekb","listType","autoplay","playsinline","toolbar","options","toolbarClassName","wrapperClassName","editorClassName","document","addEventListener","onKeydown","bind","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uSA0BeA,G,8KApBX,OACE,yBAAKC,UAAU,aACb,wCACA,yBAAKA,UAAU,iBACb,mDACA,8BAAO,MAET,yBAAKA,UAAU,iBACb,kDACA,8BAAO,MAET,yBAAKA,UAAU,iBACb,6CACA,8C,GAfcC,IAAMC,YC4HfC,G,yDAtHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAgBRC,YAAc,SAACC,GACb,IAAMC,EAAa,EAAKC,SAASF,EAAMG,OAAOC,OAC9CC,QAAQC,IAAIL,GACZM,aAAaC,QAAQ,cAAeP,GAEpC,EAAKQ,SAAS,CACZR,gBAvBe,EA2BnBS,QAAU,SAACV,GACT,EAAKG,OAASH,EAAMG,QA5BH,EAuDnBQ,qBAAuB,SAACC,GAClB,EAAKT,QACP,EAAKA,OAAOU,aAGdC,aAAa,EAAKC,SAClB,EAAKA,QAAUC,OAAOC,YAAW,cAE9B,KACHZ,QAAQC,IAAI,uBAAwBM,IA7DpC,EAAKT,OAAS,KACd,EAAKY,QAAU,KAEf,EAAKG,QAAS,EAEd,EAAKC,MAAQ,CACXlB,WAAYM,aAAaa,QAAQ,gBAAkB,eATpC,E,qDAaVC,GACP,OAAOA,EAAIC,MAAM,MAAM,K,gCAkBnBC,KAAKL,OACPK,KAAKpB,OAAOqB,YAEZD,KAAKpB,OAAOU,aAEdU,KAAKL,QAAUK,KAAKL,S,gCAGZlB,GACW,YAAfA,EAAMyB,MACRF,KAAKG,UAGP,IAAIC,EAAcJ,KAAKpB,OAAOyB,iBACX,cAAf5B,EAAMyB,MACRF,KAAKpB,OAAO0B,OAAOC,KAAKC,IAAIJ,EAAc,IAGzB,eAAf3B,EAAMyB,MACRF,KAAKpB,OAAO0B,OAAOC,KAAKC,IAAIJ,EAAc,M,+BA4B5C,OACE,yBAAKjC,UAAU,SACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,kBACb,2BACEsC,KAAK,OACLC,SAAUV,KAAKxB,YACfmC,YAAY,0CAEhB,kBAAC,IAAD,CACExC,UAAU,eACVyC,QAASZ,KAAKJ,MAAMlB,WACpBmC,KAxBG,CACXC,OAAQ,MACRC,MAAO,MACPC,WAAY,CACVC,GAAI,EACJC,UAAW,EACXC,SAAU,SACVC,SAAU,EACVC,YAAa,IAiBPlC,QAASa,KAAKb,UAEhB,kBAAC,EAAD,QAGJ,yBAAKhB,UAAU,SACb,kBAAC,SAAD,CACEmD,QAAS,CACPC,QAAS,CAAC,SAAU,YAAa,WAAY,aAAc,OAAQ,YAAa,cAAe,OAAQ,SAAU,YAEnHC,iBAAiB,mBACjBC,iBAAiB,mBACjBC,gBAAgB,kBAChBtC,qBAAsBY,KAAKZ,2B,0CAQnCuC,SAASC,iBAAiB,UAAW5B,KAAK6B,UAAUC,KAAK9B,W,GAnHzC5B,IAAMC,Y,OCKX0D,MATf,WAEE,OACE,yBAAK5D,UAAU,OACb,kBAAC,EAAD,QCGc6D,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFX,SAASY,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjE,QAAQiE,MAAMA,EAAMC,a","file":"static/js/main.e428834a.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Shortcuts.css';\n\nclass Shortcuts extends React.Component {\n  render() {\n    return (\n      <div className=\"Shortcuts\">\n        <h3>Comandos</h3>\n        <div className=\"Shortcuts-row\">\n          <label>Volta 5 segundos</label>\n          <span>{'<'}</span>\n        </div>\n        <div className=\"Shortcuts-row\">\n          <label>Pula 5 segundos</label>\n          <span>{'>'}</span>\n        </div>\n        <div className=\"Shortcuts-row\">\n          <label>Start/Stop</label>\n          <span>option</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Shortcuts;\n","import React from 'react';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n\nimport YouTube from 'react-youtube';\nimport Shortcuts from './Shortcuts';\n\nimport './Video.css';\n\nclass Video extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.target = null;\n    this.timeout = null;\n\n    this.toggle = true;\n\n    this.state = {\n      currentUrl: localStorage.getItem('current-url') || 'KNNLt38HE64'\n    }\n  }\n\n  parseUrl(url) {\n    return url.split('v=')[1];\n  }\n\n  onChangeUrl = (event) => {\n    const currentUrl = this.parseUrl(event.target.value);\n    console.log(currentUrl);\n    localStorage.setItem('current-url', currentUrl);\n\n    this.setState({\n      currentUrl\n    });\n  }\n\n  onReady = (event) => {\n    this.target = event.target;\n  }\n\n  _toggle () {\n    if (this.toggle) {\n      this.target.playVideo();\n    } else {\n      this.target.pauseVideo();\n    }\n    this.toggle = !this.toggle;\n  }\n\n  onKeydown(event) {\n    if (event.code === 'AltLeft') {\n      this._toggle();\n    }\n\n    let currentTime = this.target.getCurrentTime();\n    if (event.code === 'ArrowLeft') {\n      this.target.seekTo(Math.abs(currentTime - 5));\n    }\n\n    if (event.code === 'ArrowRight') {\n      this.target.seekTo(Math.abs(currentTime + 5));\n    }\n  }\n\n  onContentStateChange = (contentState) => {\n    if (this.target) {\n      this.target.pauseVideo();\n    }\n\n    clearTimeout(this.timeout);\n    this.timeout = window.setTimeout(() => {\n\n    }, 1000);\n    console.log('onContentStateChange', contentState);\n  }\n\n  render() {\n    const opts = {\n      height: '390',\n      width: '640',\n      playerVars: {\n        fs: 0,\n        disablekb: 0,\n        listType: 'search',\n        autoplay: 0,\n        playsinline: 1\n      },\n    };\n    return (\n      <div className=\"Video\">\n        <div className=\"col_1\">\n          <div className=\"video-container\">\n            <div className=\"toolbar-search\">\n              <input\n                type=\"text\"\n                onChange={this.onChangeUrl}\n                placeholder=\"https://www.youtube.com/watch?v=<id>\" />\n            </div>\n            <YouTube\n              className=\"video-player\"\n              videoId={this.state.currentUrl}\n              opts={opts}\n              onReady={this.onReady}\n            />\n            <Shortcuts />\n          </div>\n        </div>\n        <div className=\"col_2\">\n          <Editor\n            toolbar={{\n              options: ['inline', 'blockType', 'fontSize', 'fontFamily', 'list', 'textAlign', 'colorPicker', 'link', 'remove', 'history'],\n            }}\n            toolbarClassName=\"toolbarClassName\"\n            wrapperClassName=\"wrapperClassName\"\n            editorClassName=\"editorClassName\"\n            onContentStateChange={this.onContentStateChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.onKeydown.bind(this));\n  }\n}\n\nexport default Video;\n","import React from 'react';\nimport Video from './Video';\n\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Video />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}